import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, GenerationConfig

model_name = "deepseek-ai/deepseek-llm-7b-base"  # Choose the 7B model for now
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True) #add trust_remote_code
model = AutoModelForCausalLM.from_pretrained(model_name, torch_dtype=torch.bfloat16, device_map="auto", trust_remote_code=True) #add trust_remote_code
model.generation_config = GenerationConfig.from_pretrained(model_name, trust_remote_code=True) #add trust_remote_code
model.generation_config.pad_token_id = model.generation_config.eos_token_id

text = "The best thing about computers is"
inputs = tokenizer(text, return_tensors="pt")
outputs = model.generate(**inputs.to(model.device), max_new_tokens=50) # generate 50 new tokens
result = tokenizer.decode(outputs[0], skip_special_tokens=True)
print(result)

import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, GenerationConfig

model_name = "deepseek-ai/deepseek-llm-7b-chat"  # Use the chat version
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True) #add trust_remote_code
model = AutoModelForCausalLM.from_pretrained(model_name, torch_dtype=torch.bfloat16, device_map="auto", trust_remote_code=True) #add trust_remote_code
model.generation_config = GenerationConfig.from_pretrained(model_name, trust_remote_code=True) #add trust_remote_code
model.generation_config.pad_token_id = model.generation_config.eos_token_id

messages = [{"role": "user", "content": "What is the capital of France?"}]
input_tensor = tokenizer.apply_chat_template(messages, add_generation_prompt=True, return_tensors="pt")
outputs = model.generate(input_tensor.to(model.device), max_new_tokens=50) # generate 50 new tokens
result = tokenizer.decode(outputs[0][input_tensor.shape[1]:], skip_special_tokens=True)
print(result)